#include "inc/identification.h"
#include "inc/transfer_fcn.h"
#include "inc/closed_loop.h"
#include <iostream>

const Eigen::IOFormat fmt(4, 0, ", ", "\n", "[", "]");

int main(int argc, char const *argv[])
{
    Eigen::VectorXd in {{
    1.0000,   1.0000,   1.0000,   1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
    1.0000,    1.0000,    1.0000,    1.0000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
   -0.5000,   -0.5000,   -0.5000,   -0.5000,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,         0,         0,         0,
         0,    0.0101,    0.0202,    0.0303,
    0.0404,    0.0505,    0.0606,    0.0707,
    0.0808,    0.0909,    0.1010,    0.1111,
    0.1212,    0.1313,    0.1414,    0.1515,
    0.1616,    0.1717,    0.1818,    0.1919,
    0.2020,    0.2121,    0.2222,    0.2323,
    0.2424,    0.2525,    0.2626,    0.2727,
    0.2828,    0.2929,    0.3030,    0.3131,
    0.3232,    0.3333,    0.3434,    0.3535,
    0.3636,    0.3737,    0.3838,    0.3939,
    0.4040,    0.4141,    0.4242,    0.4343,
    0.4444,    0.4545,    0.4646,    0.4747,
    0.4848,    0.4949,    0.5051,    0.5152,
    0.5253,    0.5354,    0.5455,    0.5556,
    0.5657,    0.5758,    0.5859,    0.5960,
    0.6061,    0.6162,    0.6263,    0.6364,
    0.6465,    0.6566,    0.6667,    0.6768,
    0.6869,    0.6970,    0.7071,    0.7172,
    0.7273,    0.7374,    0.7475,    0.7576,
    0.7677,    0.7778,    0.7879,    0.7980,
    0.8081,    0.8182,    0.8283,    0.8384,
    0.8485,    0.8586,    0.8687,    0.8788,
    0.8889,    0.8990,    0.9091,    0.9192,
    0.9293,    0.9394,    0.9495,    0.9596,
    0.9697,    0.9798,    0.9899,    1.0000,
    0.9999,    0.9995,    0.9989,    0.9980,
    0.9969,    0.9956,    0.9940,    0.9921,
    0.9900,    0.9877,    0.9851,    0.9823,
    0.9792,    0.9759,    0.9724,    0.9686,
    0.9646,    0.9603,    0.9558,    0.9511,
    0.9461,    0.9409,    0.9354,    0.9298,
    0.9239,    0.9178,    0.9114,    0.9048,
    0.8980,    0.8910,    0.8838,    0.8763,
    0.8686,    0.8607,    0.8526,    0.8443,
    0.8358,    0.8271,    0.8181,    0.8090,
    0.7997,    0.7902,    0.7804,    0.7705,
    0.7604,    0.7501,    0.7396,    0.7290,
    0.7181,    0.7071,    0.6959,    0.6845,
    0.6730,    0.6613,    0.6494,    0.6374,
    0.6252,    0.6129,    0.6004,    0.5878,
    0.5750,    0.5621,    0.5490,    0.5358,
    0.5225,    0.5090,    0.4955,    0.4818,
    0.4679,    0.4540,    0.4399,    0.4258,
    0.4115,    0.3971,    0.3827,    0.3681,
    0.3535,    0.3387,    0.3239,    0.3090,
    0.2940,    0.2790,    0.2639,    0.2487,
    0.2334,    0.2181,    0.2028,    0.1874,
    0.1719,    0.1564,    0.1409,    0.1253,
    0.1097,    0.0941,    0.0785,    0.0628,
    0.0471,    0.0314,    0.0157,    0.0000 }};

    Eigen::Vector3d A {{ 1.0, -1.8955, 0.9050 }};
    Eigen::Vector3d B {{ 0.0024, 0.0048, 0.0024 }};
    DT::TransferFunction tf(B, A);

    DT::Regulator reg;
    reg.init_discrete_pid(10, 0.1, 0.7, 0.8, 0.7);

    DT::ClosedLoopSystem cls(&reg, &tf);

    for (int i=0; i<500; i++)
    {
        double desired = in[i];
        double y = cls.step(desired);
        std::cout << y << std::endl;
    }

    return 0;
}
