#include <iostream>

#include "../ControllingLib/inc/identification.h"

const Eigen::IOFormat fmt(17, 0, ", ", "\n", "[", "]");

namespace DT 
{

    namespace Examples
    {

        void example_identification() 
        {
            DT::Identificator identificator(DT::LSM, 1, 1);

            Eigen::VectorXd u { {} };
            Eigen::VectorXd y { { 6,29,29,46,51,60,60,68,71,74,77,81,80,83,85,84,87,87,89,91,92,92,92,94,91,92,94,93,94,95,96,93,95,95,97,97,94,96,97,97,94,96,96,97,94,94,96,97,94,97,96,96,97,94,94,96,97,97,94,96,96,97,94,94,96,97,94,94,96,97,94,94,96,96,96,94,96,97,97,94,96,96,96,95,96,96,94,95,96,108,166,215,222,225,232,240,233,235,239,243,236,236,240,240,243,243,236,236,240,243,243,236,236,241,243,243,236,236,240,240,240,243,236,243,236,240,243,243,243,236,240,240,244,244,244,236,240,236,240,241,243,244,236,236,240,241,244,243,243,236,241,236,241,244,244,243,236,236,241,241,244,243,236,236,241,236,241,244,244,236,241,236,241,243,236,243,236,236,240,244,233,219,219,204,207,195,189,180,183,172,176,166,165,163,159,161,161,156,156,152,151,155,154,151,151,150,147,147,147,151,151,150,150,150,150,148,148,148,148,148,148,145,145,145,145,149,149,149,149,149,147,147,147,147,147,145,145,144,144,144,144,149,149,149,149,149,149,147,147,147,147,147,147,144,144,145,145,144,144,149,149,149,149,149,149,148,147,147,147,147,147,147,147,93,71,0,0,-8,0,-37,-42,-51,-53,-57,-57,-68,-70,-75,-76,-79,-80,-84,-84,-86,-87,-88,-88,-91,-90,-91,-91,-93,-93,-95,-94,-95,-95,-96,-95,-96,-96,-97,-96,-96,-97,-98,-97,-97,-98,-98,-97,-98,-99,-98,-98,-98,-99,-99,-98,-98,-99,-98,-98,-99,-98,-98,-98,-98,-98,-98,-99,-99,-98,-98,-98,-99,-98,-98,-98,-99,-99,-99,-98,-98,-98,-99,-99,-98,-98,-98,-99,-126,-143,-176,-186,-202,-204,-214,-218,-220,-222,-223,-223,-225,-225,-227,-226,-226,-228,-226,-226,-226,-227,-229,-227,-226,-228,-227,-227,-229,-226,-226,-228,-227,-229,-227,-227,-227,-227,-227,-229,-227,-227,-229,-226,-229,-229,-227,-229,-229,-227,-229,-227,-229,-229,-227,-229,-229,-227,-229,-229,-227,-229,-227,-227,-229,-229,-227,-229,-227,-229,-227,-229,-227,-227,-227,-227,-227,-229,-227,-226,-229,-227,-229,-229,-227,-229,-229,-227,-227,-229,-227,-227,-222,-222,-213,-210,-204,-202,-197,-197,-193,-192,-190,-191,-187,-187,-186,-186,-185,-186,-184,-184,-183,-183,-183,-184,-184,-182,-184,-182,-182,-182,-182,-184,-182,-184,-184,-184,-184,-182,-182,-182,-182,-182,-182,-184,-182,-184,-182,-182,-182,-184,-182,-184,-184,-182,-182,-182,-182,-182,-182,-184,-184,-182,-184,-182,-182,-182,-182,-184,-184,-182,-184,-182,-182,-182,-182,-184,-182,-183,-181,-181,-182,-181,-181,-181,-182,-183,-183,-182,-183,-182,-182,-181,-189,-193,-201,-202,-208,-208,-211,-212,-214,-214,-215,-215,-217,-216,-218,-216,-218,-217,-217,-217,-218,-217,-219,-216,-216,-216,-217,-217,-219,-217,-219,-216,-217,-217,-219,-216,-219,-217,-219,-216,-217,-217,-219,-216,-219,-217,-217,-217,-219,-217,-219,-216,-219,-216,-217,-217,-219,-217,-219,-216,-216,-216,-216,-217,-218,-216,-216,-218,-216,-216,-216,-216,-216,-216,-216,-218,-216,-218,-216,-216,-216,-216,-216,-218,-217,-219,-216,-216,-217,-219,-219,-217,-219,-208,-187,-187,-163,-158,-141,-136,-114,-110,-95,-89,-70,-68,-51,-46,-35,-27,-17,-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} };

            for (int i = 0; i < u.size(); i++)
            {
                std::cout << "\n-------- New iteration " << i+1 << " ---------" << std::endl;
                identificator.update_coeficients(u[i], y[i]);
            }

            auto thetas = identificator.get_thetas();

            std::cout << std::endl << "----------------------------------------" << std::endl;
            std::cout << std::endl << "|          Found parameters:           |" << std::endl;
            std::cout << std::endl << "----------------------------------------" << std::endl;
            std::cout << thetas.format(fmt) << std::endl;
        }
    }
}